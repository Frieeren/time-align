/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * time-align API
 * time-align API
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  OAuthLoginRequestDto,
  OAuthLoginResponseDto,
  RefreshTokenRequestDto,
  RefreshTokenResponseDto,
} from "../../model";

import { httpClient } from "../../http";

export const authControllerOauthLogin = (oAuthLoginRequestDto: OAuthLoginRequestDto, signal?: AbortSignal) => {
  return httpClient<OAuthLoginResponseDto>({
    url: "/auth/oauth",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: oAuthLoginRequestDto,
    signal,
  });
};

export const getAuthControllerOauthLoginMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerOauthLogin>>,
    TError,
    { data: OAuthLoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerOauthLogin>>,
  TError,
  { data: OAuthLoginRequestDto },
  TContext
> => {
  const mutationKey = ["authControllerOauthLogin"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerOauthLogin>>,
    { data: OAuthLoginRequestDto }
  > = props => {
    const { data } = props ?? {};

    return authControllerOauthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerOauthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerOauthLogin>>>;
export type AuthControllerOauthLoginMutationBody = OAuthLoginRequestDto;
export type AuthControllerOauthLoginMutationError = unknown;

export const useAuthControllerOauthLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerOauthLogin>>,
      TError,
      { data: OAuthLoginRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerOauthLogin>>,
  TError,
  { data: OAuthLoginRequestDto },
  TContext
> => {
  const mutationOptions = getAuthControllerOauthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerRefresh = (refreshTokenRequestDto: RefreshTokenRequestDto, signal?: AbortSignal) => {
  return httpClient<RefreshTokenResponseDto>({
    url: "/auth/refresh",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenRequestDto,
    signal,
  });
};

export const getAuthControllerRefreshMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    { data: RefreshTokenRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationKey = ["authControllerRefresh"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    { data: RefreshTokenRequestDto }
  > = props => {
    const { data } = props ?? {};

    return authControllerRefresh(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRefresh>>>;
export type AuthControllerRefreshMutationBody = RefreshTokenRequestDto;
export type AuthControllerRefreshMutationError = unknown;

export const useAuthControllerRefresh = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRefresh>>,
      TError,
      { data: RefreshTokenRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRefresh>>,
  TError,
  { data: RefreshTokenRequestDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerGetProfile = (signal?: AbortSignal) => {
  return httpClient<void>({ url: "/auth/profile", method: "GET", signal });
};

export const getAuthControllerGetProfileQueryKey = () => {
  return ["/auth/profile"] as const;
};

export const getAuthControllerGetProfileInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof authControllerGetProfile>>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) =>
    authControllerGetProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof authControllerGetProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGetProfileInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetProfile>>
>;
export type AuthControllerGetProfileInfiniteQueryError = unknown;

export function useAuthControllerGetProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof authControllerGetProfile>>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof authControllerGetProfile>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof authControllerGetProfile>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthControllerGetProfileInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof authControllerGetProfile>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthControllerGetProfileInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAuthControllerGetProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) =>
    authControllerGetProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGetProfileQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetProfile>>>;
export type AuthControllerGetProfileQueryError = unknown;

export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetProfile>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthControllerGetProfile<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthControllerGetProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAuthControllerGetProfileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerGetProfileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetProfile>>> = ({ signal }) =>
    authControllerGetProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof authControllerGetProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerGetProfileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetProfile>>
>;
export type AuthControllerGetProfileSuspenseQueryError = unknown;

export function useAuthControllerGetProfileSuspense<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfileSuspense<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useAuthControllerGetProfileSuspense<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useAuthControllerGetProfileSuspense<
  TData = Awaited<ReturnType<typeof authControllerGetProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof authControllerGetProfile>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getAuthControllerGetProfileSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
