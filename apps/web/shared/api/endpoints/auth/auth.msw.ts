/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * time-align API
 * time-align API
 * OpenAPI spec version: 1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type { OAuthLoginResponseDto, RefreshTokenResponseDto } from "../../model";

export const getAuthControllerOauthLoginResponseMock = (
  overrideResponse: Partial<OAuthLoginResponseDto> = {}
): OAuthLoginResponseDto => ({
  user: {
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  refreshToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthControllerRefreshResponseMock = (
  overrideResponse: Partial<RefreshTokenResponseDto> = {}
): RefreshTokenResponseDto => ({
  accessToken: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getAuthControllerOauthLoginMockHandler = (
  overrideResponse?:
    | OAuthLoginResponseDto
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<OAuthLoginResponseDto> | OAuthLoginResponseDto)
) => {
  return http.post("*/auth/oauth", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthControllerOauthLoginResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getAuthControllerRefreshMockHandler = (
  overrideResponse?:
    | RefreshTokenResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<RefreshTokenResponseDto> | RefreshTokenResponseDto)
) => {
  return http.post("*/auth/refresh", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getAuthControllerRefreshResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getAuthControllerGetProfileMockHandler = (
  overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)
) => {
  return http.get("*/auth/profile", async info => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getAuthMock = () => [
  getAuthControllerOauthLoginMockHandler(),
  getAuthControllerRefreshMockHandler(),
  getAuthControllerGetProfileMockHandler(),
];
