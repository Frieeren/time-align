/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Time-Align API
 * API Gateway
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  CommonResponseDto,
  CreateScheduleRequestDto,
  CreateScheduleResponseDto,
  DetailScheduleResponseDto,
  QueryScheduleResponseDto,
  UpdateScheduleRequestDto,
  UpdateScheduleResponseDto,
} from "../../model";

import { httpClient } from "../../http";

export const schedulesControllerCreate = (createScheduleRequestDto: CreateScheduleRequestDto, signal?: AbortSignal) => {
  return httpClient<CreateScheduleResponseDto>({
    url: "/schedule/schedules",
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createScheduleRequestDto,
    signal,
  });
};

export const getSchedulesControllerCreateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerCreate>>,
    TError,
    { data: CreateScheduleRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schedulesControllerCreate>>,
  TError,
  { data: CreateScheduleRequestDto },
  TContext
> => {
  const mutationKey = ["schedulesControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesControllerCreate>>,
    { data: CreateScheduleRequestDto }
  > = props => {
    const { data } = props ?? {};

    return schedulesControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerCreate>>
>;
export type SchedulesControllerCreateMutationBody = CreateScheduleRequestDto;
export type SchedulesControllerCreateMutationError = unknown;

export const useSchedulesControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerCreate>>,
      TError,
      { data: CreateScheduleRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schedulesControllerCreate>>,
  TError,
  { data: CreateScheduleRequestDto },
  TContext
> => {
  const mutationOptions = getSchedulesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schedulesControllerFindAll = (signal?: AbortSignal) => {
  return httpClient<QueryScheduleResponseDto>({ url: "/schedule/schedules", method: "GET", signal });
};

export const getSchedulesControllerFindAllQueryKey = () => {
  return ["/schedule/schedules"] as const;
};

export const getSchedulesControllerFindAllInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindAll>>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindAll>>> = ({ signal }) =>
    schedulesControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindAllInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerFindAll>>
>;
export type SchedulesControllerFindAllInfiniteQueryError = unknown;

export function useSchedulesControllerFindAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindAll>>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindAll>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindAll>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindAll>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindAllInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindAll>>> = ({ signal }) =>
    schedulesControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof schedulesControllerFindAll>>>;
export type SchedulesControllerFindAllQueryError = unknown;

export function useSchedulesControllerFindAll<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAll<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAll<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindAll<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerFindAllSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindAll>>> = ({ signal }) =>
    schedulesControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindAllSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerFindAll>>
>;
export type SchedulesControllerFindAllSuspenseQueryError = unknown;

export function useSchedulesControllerFindAllSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAllSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindAllSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindAllSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindAll>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindAllSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schedulesControllerFindOne = (id: number, signal?: AbortSignal) => {
  return httpClient<DetailScheduleResponseDto>({ url: `/schedule/schedules/${id}`, method: "GET", signal });
};

export const getSchedulesControllerFindOneQueryKey = (id: number) => {
  return [`/schedule/schedules/${id}`] as const;
};

export const getSchedulesControllerFindOneInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindOne>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindOne>>> = ({ signal }) =>
    schedulesControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindOneInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerFindOne>>
>;
export type SchedulesControllerFindOneInfiniteQueryError = unknown;

export function useSchedulesControllerFindOneInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindOne>>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOneInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindOne>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOneInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindOne>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindOneInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerFindOne>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindOneInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindOne>>> = ({ signal }) =>
    schedulesControllerFindOne(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof schedulesControllerFindOne>>>;
export type SchedulesControllerFindOneQueryError = unknown;

export function useSchedulesControllerFindOne<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOne<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOne<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindOne<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>> },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerFindOneSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerFindOne>>> = ({ signal }) =>
    schedulesControllerFindOne(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerFindOneSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerFindOne>>
>;
export type SchedulesControllerFindOneSuspenseQueryError = unknown;

export function useSchedulesControllerFindOneSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOneSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerFindOneSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerFindOneSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerFindOne>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerFindOne>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerFindOneSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schedulesControllerUpdate = (id: number, updateScheduleRequestDto: UpdateScheduleRequestDto) => {
  return httpClient<UpdateScheduleResponseDto>({
    url: `/schedule/schedules/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateScheduleRequestDto,
  });
};

export const getSchedulesControllerUpdateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerUpdate>>,
    TError,
    { id: number; data: UpdateScheduleRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schedulesControllerUpdate>>,
  TError,
  { id: number; data: UpdateScheduleRequestDto },
  TContext
> => {
  const mutationKey = ["schedulesControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesControllerUpdate>>,
    { id: number; data: UpdateScheduleRequestDto }
  > = props => {
    const { id, data } = props ?? {};

    return schedulesControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerUpdate>>
>;
export type SchedulesControllerUpdateMutationBody = UpdateScheduleRequestDto;
export type SchedulesControllerUpdateMutationError = unknown;

export const useSchedulesControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerUpdate>>,
      TError,
      { id: number; data: UpdateScheduleRequestDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schedulesControllerUpdate>>,
  TError,
  { id: number; data: UpdateScheduleRequestDto },
  TContext
> => {
  const mutationOptions = getSchedulesControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schedulesControllerRemove = (id: number) => {
  return httpClient<CommonResponseDto>({ url: `/schedule/schedules/${id}`, method: "DELETE" });
};

export const getSchedulesControllerRemoveMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof schedulesControllerRemove>>, TError, { id: number }, TContext> => {
  const mutationKey = ["schedulesControllerRemove"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof schedulesControllerRemove>>, { id: number }> = props => {
    const { id } = props ?? {};

    return schedulesControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerRemove>>
>;

export type SchedulesControllerRemoveMutationError = unknown;

export const useSchedulesControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerRemove>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof schedulesControllerRemove>>, TError, { id: number }, TContext> => {
  const mutationOptions = getSchedulesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schedulesControllerRespondToSchedule = (id: number, signal?: AbortSignal) => {
  return httpClient<CommonResponseDto>({ url: `/schedule/schedules/${id}/respond`, method: "POST", signal });
};

export const getSchedulesControllerRespondToScheduleMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["schedulesControllerRespondToSchedule"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return schedulesControllerRespondToSchedule(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerRespondToScheduleMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>
>;

export type SchedulesControllerRespondToScheduleMutationError = unknown;

export const useSchedulesControllerRespondToSchedule = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schedulesControllerRespondToSchedule>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getSchedulesControllerRespondToScheduleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schedulesControllerInviteUsers = (id: number, signal?: AbortSignal) => {
  return httpClient<CommonResponseDto>({ url: `/schedule/schedules/${id}/invite`, method: "POST", signal });
};

export const getSchedulesControllerInviteUsersMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerInviteUsers>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schedulesControllerInviteUsers>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["schedulesControllerInviteUsers"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesControllerInviteUsers>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return schedulesControllerInviteUsers(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerInviteUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerInviteUsers>>
>;

export type SchedulesControllerInviteUsersMutationError = unknown;

export const useSchedulesControllerInviteUsers = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerInviteUsers>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof schedulesControllerInviteUsers>>, TError, { id: number }, TContext> => {
  const mutationOptions = getSchedulesControllerInviteUsersMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const schedulesControllerGetParticipants = (id: number, signal?: AbortSignal) => {
  return httpClient<CommonResponseDto>({ url: `/schedule/schedules/${id}/participants`, method: "GET", signal });
};

export const getSchedulesControllerGetParticipantsQueryKey = (id: number) => {
  return [`/schedule/schedules/${id}/participants`] as const;
};

export const getSchedulesControllerGetParticipantsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerGetParticipantsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>> = ({ signal }) =>
    schedulesControllerGetParticipants(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerGetParticipantsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
>;
export type SchedulesControllerGetParticipantsInfiniteQueryError = unknown;

export function useSchedulesControllerGetParticipantsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipantsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipantsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerGetParticipantsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerGetParticipantsInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerGetParticipantsQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerGetParticipantsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>> = ({ signal }) =>
    schedulesControllerGetParticipants(id, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerGetParticipantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
>;
export type SchedulesControllerGetParticipantsQueryError = unknown;

export function useSchedulesControllerGetParticipants<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipants<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
          TError,
          Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipants<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerGetParticipants<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerGetParticipantsQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSchedulesControllerGetParticipantsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSchedulesControllerGetParticipantsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>> = ({ signal }) =>
    schedulesControllerGetParticipants(id, signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SchedulesControllerGetParticipantsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerGetParticipants>>
>;
export type SchedulesControllerGetParticipantsSuspenseQueryError = unknown;

export function useSchedulesControllerGetParticipantsSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipantsSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSchedulesControllerGetParticipantsSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSchedulesControllerGetParticipantsSuspense<
  TData = Awaited<ReturnType<typeof schedulesControllerGetParticipants>>,
  TError = unknown,
>(
  id: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<Awaited<ReturnType<typeof schedulesControllerGetParticipants>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSchedulesControllerGetParticipantsSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(queryOptions, queryClient) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const schedulesControllerGenerateInviteLink = (id: number, signal?: AbortSignal) => {
  return httpClient<CommonResponseDto>({ url: `/schedule/schedules/${id}/invite-link`, method: "POST", signal });
};

export const getSchedulesControllerGenerateInviteLinkMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["schedulesControllerGenerateInviteLink"];
  const { mutation: mutationOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>,
    { id: number }
  > = props => {
    const { id } = props ?? {};

    return schedulesControllerGenerateInviteLink(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SchedulesControllerGenerateInviteLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>
>;

export type SchedulesControllerGenerateInviteLinkMutationError = unknown;

export const useSchedulesControllerGenerateInviteLink = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof schedulesControllerGenerateInviteLink>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getSchedulesControllerGenerateInviteLinkMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
