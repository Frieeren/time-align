/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Time-Align API
 * API Gateway
 * OpenAPI spec version: 1.0
 */
import { z as zod } from "zod";

export const schedulesControllerCreateHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerCreateBody = zod.object({
  title: zod.string(),
  description: zod.string(),
  startTime: zod.string().datetime({}),
  endTime: zod.string().datetime({}),
  location: zod.string(),
  status: zod.string(),
  isAllDay: zod.boolean(),
  createdAt: zod.string().datetime({}),
  updatedAt: zod.string().datetime({}),
  participants: zod.array(zod.string()),
});

export const schedulesControllerFindAllHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerFindAllResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({
    data: zod.array(zod.string()),
    pageInfo: zod.object({
      page: zod.number(),
      size: zod.number(),
      totalElements: zod.number(),
      totalPages: zod.number(),
    }),
  }),
});

export const schedulesControllerFindOneParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerFindOneHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerFindOneResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({
    id: zod.number(),
    title: zod.string(),
    description: zod.string(),
    startTime: zod.string().datetime({}),
    endTime: zod.string().datetime({}),
    location: zod.string(),
    status: zod.string(),
    isAllDay: zod.boolean(),
    createdAt: zod.string().datetime({}),
    updatedAt: zod.string().datetime({}),
    participants: zod.array(zod.string()),
  }),
});

export const schedulesControllerUpdateParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerUpdateHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerUpdateBody = zod.object({
  title: zod.string().optional(),
  description: zod.string().optional(),
  startTime: zod.string().datetime({}).optional(),
  endTime: zod.string().datetime({}).optional(),
  location: zod.string().optional(),
  status: zod.string().optional(),
  isAllDay: zod.boolean().optional(),
  createdAt: zod.string().datetime({}).optional(),
  updatedAt: zod.string().datetime({}).optional(),
  participants: zod.array(zod.string()).optional(),
});

export const schedulesControllerUpdateResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({
    id: zod.number(),
    title: zod.string(),
    description: zod.string(),
    startTime: zod.string().datetime({}),
    endTime: zod.string().datetime({}),
    location: zod.string(),
    status: zod.string(),
    isAllDay: zod.boolean(),
    createdAt: zod.string().datetime({}),
    updatedAt: zod.string().datetime({}),
    participants: zod.array(zod.string()),
  }),
});

export const schedulesControllerRemoveParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerRemoveHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerRemoveResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({}),
});

export const schedulesControllerRespondToScheduleParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerRespondToScheduleHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerRespondToScheduleResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({}),
});

export const schedulesControllerInviteUsersParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerInviteUsersHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerInviteUsersResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({}),
});

export const schedulesControllerGetParticipantsParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerGetParticipantsHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerGetParticipantsResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({}),
});

export const schedulesControllerGenerateInviteLinkParams = zod.object({
  id: zod.number(),
});

export const schedulesControllerGenerateInviteLinkHeader = zod.object({
  "x-user-roles": zod.string().optional().describe("API Gateway에서 전달되는 사용자 역할"),
  "x-user-name": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이름"),
  "x-user-email": zod.string().optional().describe("API Gateway에서 전달되는 사용자 이메일"),
  "x-user-id": zod.string().describe("API Gateway에서 전달되는 사용자 ID"),
});

export const schedulesControllerGenerateInviteLinkResponse = zod.object({
  statusCode: zod.number(),
  message: zod.string(),
  data: zod.object({}),
});
