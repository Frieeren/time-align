/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Time-Align API
 * API Gateway
 * OpenAPI spec version: 1.0
 */
import { faker } from "@faker-js/faker";

import { http, HttpResponse, delay } from "msw";

import type {
  CommonResponseDto,
  CreateScheduleResponseDto,
  DetailScheduleResponseDto,
  QueryScheduleResponseDto,
  UpdateScheduleResponseDto,
} from "../../model";

export const getSchedulesControllerCreateResponseMock = (
  overrideResponse: Partial<CreateScheduleResponseDto> = {}
): CreateScheduleResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    startTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    endTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    location: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    isAllDay: faker.datatype.boolean(),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } })
    ),
  },
  ...overrideResponse,
});

export const getSchedulesControllerFindAllResponseMock = (
  overrideResponse: Partial<QueryScheduleResponseDto> = {}
): QueryScheduleResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } })
    ),
    pageInfo: {
      page: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      size: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      totalElements: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
      totalPages: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    },
  },
  ...overrideResponse,
});

export const getSchedulesControllerFindOneResponseMock = (
  overrideResponse: Partial<DetailScheduleResponseDto> = {}
): DetailScheduleResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    startTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    endTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    location: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    isAllDay: faker.datatype.boolean(),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } })
    ),
  },
  ...overrideResponse,
});

export const getSchedulesControllerUpdateResponseMock = (
  overrideResponse: Partial<UpdateScheduleResponseDto> = {}
): UpdateScheduleResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {
    id: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
    title: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    startTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    endTime: `${faker.date.past().toISOString().split(".")[0]}Z`,
    location: faker.string.alpha({ length: { min: 10, max: 20 } }),
    status: faker.string.alpha({ length: { min: 10, max: 20 } }),
    isAllDay: faker.datatype.boolean(),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
      faker.string.alpha({ length: { min: 10, max: 20 } })
    ),
  },
  ...overrideResponse,
});

export const getSchedulesControllerRemoveResponseMock = (
  overrideResponse: Partial<CommonResponseDto> = {}
): CommonResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {},
  ...overrideResponse,
});

export const getSchedulesControllerRespondToScheduleResponseMock = (
  overrideResponse: Partial<CommonResponseDto> = {}
): CommonResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {},
  ...overrideResponse,
});

export const getSchedulesControllerInviteUsersResponseMock = (
  overrideResponse: Partial<CommonResponseDto> = {}
): CommonResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {},
  ...overrideResponse,
});

export const getSchedulesControllerGetParticipantsResponseMock = (
  overrideResponse: Partial<CommonResponseDto> = {}
): CommonResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {},
  ...overrideResponse,
});

export const getSchedulesControllerGenerateInviteLinkResponseMock = (
  overrideResponse: Partial<CommonResponseDto> = {}
): CommonResponseDto => ({
  statusCode: faker.number.float({ min: undefined, max: undefined, fractionDigits: 2 }),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  data: {},
  ...overrideResponse,
});

export const getSchedulesControllerCreateMockHandler = (
  overrideResponse?:
    | CreateScheduleResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<CreateScheduleResponseDto> | CreateScheduleResponseDto)
) => {
  return http.post("*/schedule/schedules", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerCreateResponseMock()
      ),
      { status: 201, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerFindAllMockHandler = (
  overrideResponse?:
    | QueryScheduleResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<QueryScheduleResponseDto> | QueryScheduleResponseDto)
) => {
  return http.get("*/schedule/schedules", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerFindAllResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerFindOneMockHandler = (
  overrideResponse?:
    | DetailScheduleResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<DetailScheduleResponseDto> | DetailScheduleResponseDto)
) => {
  return http.get("*/schedule/schedules/:id", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerFindOneResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerUpdateMockHandler = (
  overrideResponse?:
    | UpdateScheduleResponseDto
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<UpdateScheduleResponseDto> | UpdateScheduleResponseDto)
) => {
  return http.patch("*/schedule/schedules/:id", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerUpdateResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerRemoveMockHandler = (
  overrideResponse?:
    | CommonResponseDto
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<CommonResponseDto> | CommonResponseDto)
) => {
  return http.delete("*/schedule/schedules/:id", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerRemoveResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerRespondToScheduleMockHandler = (
  overrideResponse?:
    | CommonResponseDto
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CommonResponseDto> | CommonResponseDto)
) => {
  return http.post("*/schedule/schedules/:id/respond", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerRespondToScheduleResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerInviteUsersMockHandler = (
  overrideResponse?:
    | CommonResponseDto
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CommonResponseDto> | CommonResponseDto)
) => {
  return http.post("*/schedule/schedules/:id/invite", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerInviteUsersResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerGetParticipantsMockHandler = (
  overrideResponse?:
    | CommonResponseDto
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CommonResponseDto> | CommonResponseDto)
) => {
  return http.get("*/schedule/schedules/:id/participants", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerGetParticipantsResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};

export const getSchedulesControllerGenerateInviteLinkMockHandler = (
  overrideResponse?:
    | CommonResponseDto
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CommonResponseDto> | CommonResponseDto)
) => {
  return http.post("*/schedule/schedules/:id/invite-link", async info => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSchedulesControllerGenerateInviteLinkResponseMock()
      ),
      { status: 200, headers: { "Content-Type": "application/json" } }
    );
  });
};
export const getSchedulesMock = () => [
  getSchedulesControllerCreateMockHandler(),
  getSchedulesControllerFindAllMockHandler(),
  getSchedulesControllerFindOneMockHandler(),
  getSchedulesControllerUpdateMockHandler(),
  getSchedulesControllerRemoveMockHandler(),
  getSchedulesControllerRespondToScheduleMockHandler(),
  getSchedulesControllerInviteUsersMockHandler(),
  getSchedulesControllerGetParticipantsMockHandler(),
  getSchedulesControllerGenerateInviteLinkMockHandler(),
];
